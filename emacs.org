#+TITLE: Guowei Lv's Emacs Configuration
#+AUTHOR: Guowei Lv

* User details
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Guowei Lv"
      user-mail-address "lvguowei1002@gmail.com")
#+END_SRC

* Environment
#+begin_src emacs-lisp
(setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:/usr/bin:/bin:/opt/gradle-2.3/bin:/Library/TeX/texbin:" (getenv "PATH")))
(setq exec-path (append exec-path '("/usr/local/bin")))
(require 'cl)
#+end_src

* Font
 #+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Source Code Pro-15"))
 #+end_src

* Sane defaults
** Splash Screen
#+begin_src emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
#+end_src

** Tool bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Marking Text
#+begin_src emacs-lisp
(delete-selection-mode t)
(transient-mark-mode t)
(setq x-select-enable-clipboard t)
#+end_src

** Better Parenthesis
#+begin_src emacs-lisp
(electric-pair-mode 1)
;; make electric-pair-mode work on more brackets
(setq electric-pair-pairs '(
			    (?\" . ?\")
                            (?\{ . ?\})
                            ))

(use-package paren
  :ensure t
  :config
  (setq show-paren-style 'expression)
  (show-paren-mode t))
#+end_src

** Indentation
#+begin_src emacs-lisp
(setq tab-width 4
      indent-tabs-mode nil)
;; not convert TAB to spaces for org tangle
(setq org-src-preserve-indentation t)
#+end_src

** Yes and No
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Visual line mode
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

** Fix term backgroud color
#+begin_src emacs
(setq term-default-fg-color (face-foreground 'default))
(setq term-default-bg-color (face-background 'default))
#+end_src

** Line number
#+begin_src emacs-lisp
(setq linum-format " %2i ")
(global-set-key (kbd "<f5>") 'linum-mode)
#+end_src

** Terminal Settings
#+begin_src emacs-lisp
(setq system-uses-terminfo nil)
#+end_src

** Smart Beginning of Line
#+begin_src emacs-lisp
(defun spacemacs/smart-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.
Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.
If ARG is not nil or 1, move forward ARG - 1 lines first. If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))
  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key (kbd "C-a") 'spacemacs/smart-move-beginning-of-line)
#+end_src
** Keyboard Settings for Mac
#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)
#+end_src
** Hungry delete config
#+begin_src emacs-lisp
(load "cc-mode")
(global-set-key (kbd "C-<delete>") 'c-hungry-delete-forward)
(global-set-key (kbd "C-<backspace>") 'c-hungry-delete-backwards)
#+end_src

** Resizing windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-up>") 'shrink-window)
(global-set-key (kbd "<C-down>") 'enlarge-window)
(global-set-key (kbd "<C-left>") 'shrink-window-horizontally)
(global-set-key (kbd "<C-right>") 'enlarge-window-horizontally)
#+END_SRC

* Melpa Packages
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :init
  (require 'recentf)
  :config
  (progn
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    (setq projectile-completion-system 'helm)
    (setq projectile-switch-project-action 'helm-projectile)
    (use-package ag
      :commands ag
      :ensure t)))
#+END_SRC

** Helm Mode
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :bind ("C-c p h" . helm-projectile)
	    :config
	    (progn
	      (helm-projectile-on)
	      (setq projectile-indexing-method 'alien)))
          (use-package helm-ag :defer 10  :ensure t))
  :config
  (helm-autoresize-mode t)
  (helm-mode 1)
  (setq helm-ff-newfile-prompt-p nil
        helm-M-x-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-split-window-in-side-p t
	helm-recentf-fuzzy-match t
	helm-ff-file-name-history-use-recentf t)

  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
	 ("C-s" . helm-occur)
	 ("M-y" . helm-show-kill-ring)
         ("C-x C-f" . helm-find-files)
	 :map helm-map
         ("<tab>" . helm-execute-persistent-action)
	 ("C-i" . helm-execute-persistent-action)
	 ("C-z" . helm-select-action)))
#+end_src

** Dired+ Mode
#+begin_src emacs-lisp
(use-package dired+
  :ensure t)
#+end_src

** Neotree
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :config
  (global-set-key [f8] 'neotree-toggle))
#+end_src

** Expand Region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :commands er/expand-region
  :bind ("C-c C-<SPC>" . er/expand-region))
#+end_src

** Undo Tree
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t)
#+end_src

** Auto Complete
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init (progn
          (use-package company-flx
	    :ensure t))
  :config
  (add-hook 'after-init-hook 'global-company-mode)
  (company-flx-mode +1))
  
#+end_src

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

#+end_src

** Iedit
#+begin_src emacs-lisp
(use-package iedit
  :ensure t
  :bind ("C-c ," . iedit-mode))
#+end_src

** Ace window
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :bind ("C-x o" . ace-window))
#+end_src

** Org Mode Settings
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib)

(setq org-log-redeadline 'note)
(eval-after-load "org"
 '(require 'ox-md nil t))

(setq org-src-fontify-natively t)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** Org-bullets settings
#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** Org contrib
#+BEGIN_SRC emacs-lisp
(require 'org-mime)
(setq org-mime-library 'mml)
#+END_SRC
*** Org Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
  '((sh . t)
    (python . t)
    (emacs-lisp . t)
    (clojure . t)
    (C . t)))
#+end_src

*** Take notes more effectively with org-mode
**** Step1. Set up a keyboard shorcut to go to the main org file
  #+begin_src emacs-lisp
(global-set-key (kbd "C-c o") 
                (lambda () (interactive) (find-file "/home/lv/Dropbox/org/organizer.org")))
  #+end_src
**** Step2. Use org-refile to file or jump to headings
  #+begin_src emacs-lisp
;; Set the agenda file pool
(setq org-agenda-files '("~/Dropbox/org"))
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
  #+end_src
**** Step3. Use org-capture
   #+begin_src emacs-lisp
(setq org-default-notes-file "/home/lv/Dropbox/org/organizer.org")
(define-key global-map "\C-cc" 'org-capture)
   #+end_src
**** Step4. Define your own org-capture-template
  #+begin_src emacs-lisp
(setq org-capture-templates
      (quote (("t" "Todo" entry (file+datetree "~/Dropbox/org/organizer.org")
               "* TODO %?\n%U\n%a\n")
              ("j" "Journal" entry (file "~/Dropbox/org/journal.org")
               "* %? %^g\n%U\n")
	       ("w" "Work" entry (file+datetree "~/Dropbox/org/work.org")
               "* TODO %?\n%U\n%a\n")
               )))
  #+end_src
**** Step5. Use deft to quickly browse through the notes
  #+begin_src emacs-lisp
(use-package deft
  :ensure t
  :config
  (setq deft-directory "~/Dropbox/org")
  (setq deft-extension "org")
  (setq deft-text-mode 'org-mode)
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-auto-save-interval 0)
  :bind ("C-c d" . deft))
  #+end_src
**** Step6. Agenda view
  #+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
  #+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

** Chinese Input
#+BEGIN_SRC emacs-lisp
(use-package chinese-pyim
  :ensure t)
#+END_SRC

** Paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
#+END_SRC
** Clojure Mode
 #+begin_src emacs-lisp
(use-package flycheck-pos-tip
  :ensure t)

(use-package clojure-mode
  :ensure t
  :init
  (progn
    (use-package clojure-mode-extra-font-locking
      :ensure t)
    (use-package flycheck-clojure
      :ensure t))
  :config
  (progn
    (add-hook 'clojure-mode-hook 'enable-paredit-mode)
    (add-hook 'clojure-mode-hook 'subword-mode)
    (add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))))))

(defun clojure/fancify-symbols (mode)
  "Pretty symbols for Clojure's anonymous functions and sets,
   like (λ [a] (+ a 5)), ƒ(+ % 5), and ∈{2 4 6}."
  (font-lock-add-keywords mode
    `(("(\\(fn\\)[\[[:space:]]"
       (0 (progn (compose-region (match-beginning 1)
                                 (match-end 1) "λ"))))
      ("(\\(partial\\)[\[[:space:]]"
       (0 (progn (compose-region (match-beginning 1)
                                 (match-end 1) "Ƥ"))))
      ("(\\(comp\\)[\[[:space:]]"
       (0 (progn (compose-region (match-beginning 1)
                                 (match-end 1) "∘"))))
      ("\\(#\\)("
       (0 (progn (compose-region (match-beginning 1)
                                 (match-end 1) "ƒ"))))
      ("\\(#\\){"
       (0 (progn (compose-region (match-beginning 1)
                                 (match-end 1) "∈")))))))

(dolist (m '(clojure-mode clojurescript-mode clojurec-mode clojurex-mode))
	  (clojure/fancify-symbols m))


;; Cider
(use-package cider
  :ensure t
  :config
  (progn
    ;; provides minibuffer documentation for the code you're typing into the repl
    (add-hook 'cider-mode-hook #'eldoc-mode)

    ;; go right to the REPL buffer when it's finished connecting
    (setq cider-repl-pop-to-buffer-on-connect t)

    ;; When there's a cider error, show its buffer and switch to it
    (setq cider-show-error-buffer t)
    (setq cider-auto-select-error-buffer t)

    ;; Where to store the cider history.
    (setq cider-repl-history-file "~/.emacs.d/cider-history")

    ;; Wrap when navigating history.
    (setq cider-repl-wrap-history t)

    ;; enable paredit in your REPL
    (add-hook 'cider-repl-mode-hook 'paredit-mode)

    ;; Use clojure mode for other extensions
    (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
    ;(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))))


;; clojure refactor
(use-package clj-refactor
  :ensure t)

;; org babel settings
(require 'ob-clojure)
(setq org-babel-clojure-backend 'cider)

;; squiggly-clojure
(eval-after-load 'flycheck '(flycheck-clojure-setup))
(add-hook 'after-init-hook #'global-flycheck-mode)

(with-eval-after-load 'flycheck
  (flycheck-pos-tip-mode))

(eval-after-load 'flycheck
  '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages))

;; compojure indentation
(define-clojure-indent
  (defroutes 'defun)
  (GET 2)
  (POST 2)
  (PUT 2)
  (DELETE 2)
  (HEAD 2)
  (ANY 2)
  (context 2))

 #+end_src

** Avy configuration
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-j" . avy-goto-char-2))
#+end_src

** Rainbow delimiter mode
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

** Disable highlight changes mode
#+begin_src emacs-lisp
(highlight-changes-mode -1)
#+end_src

** Buffermove
#+begin_src emacs-lisp
(use-package buffer-move
  :ensure t
  :bind (("<C-S-up>" . buf-move-up)
         ("<C-S-down>" . buf-move-down)
	 ("<C-S-left>" . buf-move-left)
	 ("<C-S-right>" . buf-move-right)))
#+end_src

** nyan cat
#+begin_src emacs-lisp
(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode t))
#+end_src

** Common lisp
#+begin_src emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
(setq inferior-lisp-program "sbcl")
(setq slime-contribs '(slime-fancy))
#+end_src


** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+END_SRC

** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-M->" . mc/mark-next-like-this)
         ("C-M-<" . mc/mark-previous-like-this)
	 ("C-c C-M-<" . mc/mark-all-like-this)))
#+end_src

** EDBI
#+BEGIN_SRC emacs-lisp
(use-package edbi
  :ensure t)
#+END_SRC

** Rest Client
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :ensure t)
#+END_SRC

** Multi-Term
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t)
#+END_SRC
  
